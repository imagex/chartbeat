<?php
/**
 * @file
 * The main module file.
 *
 * Contains menu, permission, init, and page alter hook implementations.
 */


/**
 * Implements hook_menu().
 */
function chartbeat_menu() {
  $items['admin/config/system/chartbeat'] = array(
    'title' => 'Chartbeat',
    'description' => 'Change the setting configuration when using Chartbeat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chartbeat_admin_settings'),
    'access arguments' => array('administer chartbeat settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'chartbeat.admin.inc',
  );
  $items['admin/config/system/chartbeat/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/chartbeat/dashboard'] = array(
    'title' => 'Chartbeat Dashboard',
    'description' => 'the dashboard for your Chartbeat site',
    'page callback' => 'chartbeat_dashboard_page',
    // 'page arguments' => array('chartbeat_dashboard_form'),
    'access arguments' => array('administer chartbeat settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'chartbeat.admin.inc',
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function chartbeat_permission() {
  return array(
    'administer chartbeat settings' => array(
      'title' => t('Administer Chartbeat settings'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function chartbeat_init() {
  $uid = variable_get('chartbeat_uid', '');

  // Handler for canonical setting.
  $canonical = variable_get('chartbeat_use_canonical', '0');
  $canonical = !empty($canonical) ? TRUE : FALSE;

  // Handler for cookie setting.
  $cookies = variable_get('chartbeat_cookies', '0');
  $cookies = !empty($cookies) ? FALSE : TRUE;

  // Handler for Publishing Sections setting.
  $page = menu_get_object();
  if (is_object($page) && $page->nid) {
    $sections = _chartbeat_publishing_sections_load_terms($page->nid);
    $author = user_load($page->uid)->name;
  }
  else {
    $sections = array();
    $authors = NULL;
  }


  if (is_numeric($uid)) {
    // Add the header script to start the timer.
    drupal_add_html_head(array(
      '#tag' => 'script',
      '#attributes' => array('type' => 'text/javascript'),
      '#value' => 'var _sf_startpt=(new Date()).getTime();',
    ), 'chartbeat');
    // Inject the Chartbeat settings.
    $settings = array(
      'uid' => (int) $uid,
      'domain' => variable_get('chartbeat_domain', ''),
      'useCanonical' => $canonical,
      'noCookies' => $cookies,
    );

    if (!empty($sections)) {
      $settings['sections'] = $sections;
    }
    if (!empty($author)) {
      $settings['authors'] = $author;
    }

    drupal_add_js(array(
      'chartbeat' => $settings,
      ),
    'setting');
  }
}

/**
 * Helper function to get section names from associated taxonomy terms.
 *
 * @param integer $nid
 *   The node id of the page.
 *
 * @return string
 *   A comma-separated list of taxonomy terms, which represent sections.
 */
function _chartbeat_publishing_sections_load_terms($nid = 0) {
  $sections_enabled = variable_get('chartbeat_sections_enable', FALSE);
  if (!$sections_enabled || $nid == 0) {
    return FALSE;
  }
  // If Publishing Sections are enabled, get a list of vids that are used.
  $sections = variable_get('chartbeat_sections', array());
  $all_terms = array();

  // Load all terms from those vocabs.
  foreach ($sections as $vid => $value) {
    $all_terms = array_merge($all_terms, taxonomy_get_tree($value));
  }

  $terms = array();
  // Create array, key terms to tids.
  foreach ($all_terms as $term) {
    $terms[$term->tid] = $term->name;
  }

  // 1. Check what terms are on the page we're on.
  $result = db_select('taxonomy_index', 't')
    ->fields('t')
    ->condition('nid', $nid, '=')
    ->execute();

  $node_terms = array();

  // 2. Compare to all terms on all vocabs in $sections
  // 3. Unset all terms not existing in $sections.
  while ($res = $result->fetchAssoc()) {
    if (isset($terms[$res['tid']])) {
      $node_terms[$res['tid']] = $terms[$res['tid']];
    }
  }

  if (empty($node_terms)) {
    return FALSE;
  }
  $term_string = implode(',', $node_terms);

  return $term_string;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function chartbeat_form_node_admin_content_alter(&$form, &$form_state) {
  $form['admin']['nodes']['#header']['concurrent'] = array(
    'data' => 'Concurrent Views',
    'field' => '',
  );

  $api = variable_get('chartbeat_api_key', FALSE);

  foreach ($form['admin']['nodes']['#options'] as &$node) {

    $href = $node['title']['data']['#href'];

    if ($api) {
      $host = $_SERVER['SERVER_NAME'];
      $req_http = "http://api.chartbeat.com/live/summary/v3/?apikey=$api&host=$host&keys=read&path=/$href";
      $resp = drupal_http_request($req_http);

      if ($resp->code == 200) {
        $response = json_decode($resp->data, TRUE);
        if (!empty($response)) {
          $num = (int) $response['read']['data']['sum'];
          $node['concurrent'] = $num;
        }
        else {
          $node['concurrent'] = 0;
        }
      }
      else {
        $node['concurrent'] = 'n/a';
      }
    }
    else {
      $node['concurrent'] = 'n/a';
    }
  }
}

/**
 * Implements hook_block_info().
 *
 */
function chartbeat_block_info() {

  $blocks['chartbeat-dashboard'] = array(
    'info' => t('Chartbeat dashboard iframe'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
    'weight' => 10,
    'status' => TRUE,
    'region' => 'dashboard_main',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function chartbeat_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'chartbeat-dashboard':
      $block['subject'] = t('Chartbeat Dashboard');
      $block['content'] = _chartbeat_dashboard_view();
      break;
  }

  return $block;
}

/**
 * [_chartbeat_dashboard_view description]
 *
 * @return [type]
 *   [description]
 */
function _chartbeat_dashboard_view() {
  $api = variable_get('chartbeat_api_key', FALSE);
  $url = variable_get('chartbeat_domain', '');

  if (!empty($api) && !empty($url)) {
    $var = <<<EOT
        <div id='chartbeat-widget'></div>
        <script src='http://static.chartbeat.com/js/sitewidgets/sitetotal.js' type='text/javascript'></script>
        <script type='text/javascript'>
        (function() {
            var config = {
                'api': 'http://api.chartbeat.com/live/quickstats/v3/?apikey=$api&host=$url',
                'element': 'chartbeat-widget',
            };

            new SiteTotal(config);
        })();
        </script>
        <div class="clearfix"></div>
EOT;
        /*
          Old top pages widget; currently not working.

        <div id="nd3219623"></div>
        <script src type></script>
        <script src="http://static.chartbeat.com/js/sitewidgets/topwidget.js"
          type="text/javascript" language="javascript"></script>
        <script type="text/javascript" language="javascript">
        new topwidget("$api", "$url" , "nd3219623", "", null);
        </script>
        <div class="clearfix"></div>
        */
    $content = array(
      '#type' => 'markup',
      '#markup' => $var,
    );
  }
  else {
    $content = array(
      '#type' => 'markup',
      '#markup' => 'Pages cannot be retrieved at this time.',
    );
  }
  return $content;
}

/**
 * Implements hook_block_list_alter().
 */
function chartbeat_block_list_alter(&$blocks) {
  foreach ($blocks as $bid => $block) {
    if (($block->module == 'chartbeat') && ($block->delta == "chartbeat_dashboard")) {
      unset($blocks[$bid]);
      break;
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function chartbeat_page_alter(&$page) {
  $uid = variable_get('chartbeat_uid', '');
  if (!empty($uid)) {
    // Make sure we're outputting a user ID instead of a user name.
    if (!is_numeric($uid)) {
      drupal_set_message(t('Your <em>Chartbeat User ID</em> must be a number.
        You can locate it within step two of adding a new website to track at
        <a href="@chartbeat">Chartbeat</a>.',
        array('@chartbeat' => 'http://chartbeat.com')), 'warning', FALSE);
      return;
    }
    $output = <<<EOT
<script type="text/javascript">
  var _sf_async_config=Drupal.settings.chartbeat;
  (function(){
    function loadChartbeat() {
      window._sf_endpt=(new Date()).getTime();
      var e = document.createElement('script');
      e.setAttribute('language', 'javascript');
      e.setAttribute('type', 'text/javascript');
      e.setAttribute('src',
         (("https:" == document.location.protocol) ? "https://s3.amazonaws.com/" : "http://") +
         "static.chartbeat.com/js/chartbeat.js");
      document.body.appendChild(e);
    }
    var oldonload = window.onload;
    window.onload = (typeof window.onload != 'function') ?
       loadChartbeat : function() { oldonload(); loadChartbeat(); };
  })();
</script>
EOT;
    $page['page_bottom']['chartbeat'] = array('#markup' => $output);
  }
}
